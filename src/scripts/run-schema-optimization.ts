/**
 * Schema Optimization Migration Runner
 * 
 * This script runs the comprehensive database schema optimization migration
 * that adds missing tables, foreign keys, indexes, and storage optimizations.
 * 
 * Usage:
 * 1. Ensure SUPABASE_SERVICE_ROLE_KEY is set in your environment
 * 2. Run: npx tsx src/scripts/run-schema-optimization.ts
 */

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import { join } from 'path'
import type { Database } from '@/types/database'

// Environment validation
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables:')
  if (!supabaseUrl) console.error('  - NEXT_PUBLIC_SUPABASE_URL')
  if (!supabaseServiceKey) console.error('  - SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

// Create admin Supabase client
const supabase = createClient<Database>(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

interface MigrationResult {
  migration: string
  success: boolean
  error?: string
  warnings?: string[]
}

async function runMigration(migrationFile: string): Promise<MigrationResult> {
  try {
    console.log(`üìÑ Running migration: ${migrationFile}`)
    
    // Read the migration SQL file
    const migrationPath = join(process.cwd(), 'src/migrations', migrationFile)
    const migrationSQL = readFileSync(migrationPath, 'utf8')
    
    // Split SQL into individual statements
    const statements = migrationSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--') && !stmt.match(/^\s*$/))
    
    console.log(`  üìù Executing ${statements.length} SQL statements...`)
    
    const warnings: string[] = []
    
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i] + ';'
      
      // Skip empty statements and comments
      if (!statement.trim() || statement.trim().startsWith('--')) {
        continue
      }
      
      try {
        const { error } = await supabase.rpc('exec', { sql: statement })
        
        if (error) {
          // Check if it's a warning (like "already exists" errors)
          if (error.message.includes('already exists') || 
              error.message.includes('does not exist') ||
              error.message.includes('IF NOT EXISTS')) {
            warnings.push(`Statement ${i + 1}: ${error.message}`)
            continue
          }
          
          throw new Error(`Statement ${i + 1}: ${error.message}`)
        }
      } catch (execError) {
        // Try alternative execution method
        const { error: directError } = await supabase
          .from('_migrations')
          .select('*')
          .limit(1)
        
        if (directError && directError.message.includes('does not exist')) {
          // If _migrations table doesn't exist, try direct SQL execution
          console.log(`  ‚ö†Ô∏è  Attempting direct SQL execution for statement ${i + 1}`)
          // This would require a different approach in production
        }
        
        throw execError
      }
    }
    
    return {
      migration: migrationFile,
      success: true,
      warnings: warnings.length > 0 ? warnings : undefined
    }
    
  } catch (error) {
    return {
      migration: migrationFile,
      success: false,
      error: error instanceof Error ? error.message : String(error)
    }
  }
}

async function validateMigration(): Promise<boolean> {
  try {
    console.log('üîç Validating migration results...')
    
    // Check if new tables exist
    const tablesToCheck = ['admin_users', 'email_campaigns', 'analytics_events', 'albums']
    
    for (const table of tablesToCheck) {
      const { data, error } = await supabase
        .from(table as any)
        .select('*')
        .limit(1)
      
      if (error) {
        console.log(`  ‚ùå Table '${table}' not accessible: ${error.message}`)
        return false
      }
      
      console.log(`  ‚úÖ Table '${table}' exists and is accessible`)
    }
    
    // Check if new columns exist in guests table
    const { data: guestData, error: guestError } = await supabase
      .from('guests')
      .select('invitation_sent_at, group_name, table_number')
      .limit(1)
    
    if (guestError) {
      console.log(`  ‚ùå New guest columns not accessible: ${guestError.message}`)
      return false
    }
    
    console.log('  ‚úÖ New guest columns exist and are accessible')
    
    // Check storage functions
    const { data: functionData, error: functionError } = await supabase
      .rpc('get_storage_stats')
    
    if (functionError) {
      console.log(`  ‚ùå Storage functions not accessible: ${functionError.message}`)
      return false
    }
    
    console.log('  ‚úÖ Storage utility functions are working')
    
    return true
    
  } catch (error) {
    console.log(`  ‚ùå Validation failed: ${error}`)
    return false
  }
}

async function runSchemaOptimization() {
  console.log('üöÄ Starting Wedding Website Schema Optimization...')
  console.log('')
  
  const migrations = [
    '003_schema_optimization.sql',
    '004_storage_optimization.sql'
  ]
  
  const results: MigrationResult[] = []
  
  // Run each migration
  for (const migration of migrations) {
    const result = await runMigration(migration)
    results.push(result)
    
    if (result.success) {
      console.log(`  ‚úÖ ${migration} completed successfully`)
      if (result.warnings && result.warnings.length > 0) {
        console.log(`  ‚ö†Ô∏è  Warnings:`)
        result.warnings.forEach(warning => console.log(`    - ${warning}`))
      }
    } else {
      console.log(`  ‚ùå ${migration} failed: ${result.error}`)
    }
    console.log('')
  }
  
  // Validate results
  const isValid = await validateMigration()
  
  // Summary
  console.log('üìã Migration Summary:')
  console.log('=' .repeat(50))
  
  const successful = results.filter(r => r.success).length
  const failed = results.filter(r => !r.success).length
  
  console.log(`‚úÖ Successful migrations: ${successful}`)
  console.log(`‚ùå Failed migrations: ${failed}`)
  console.log(`üîç Validation: ${isValid ? 'PASSED' : 'FAILED'}`)
  console.log('')
  
  if (failed > 0) {
    console.log('‚ùå Failed Migrations:')
    results.filter(r => !r.success).forEach(result => {
      console.log(`  - ${result.migration}: ${result.error}`)
    })
    console.log('')
  }
  
  if (isValid && failed === 0) {
    console.log('üéâ Schema optimization completed successfully!')
    console.log('')
    console.log('üìã What was optimized:')
    console.log('  ‚úÖ Added missing tables (admin_users, email_campaigns, analytics_events, albums)')
    console.log('  ‚úÖ Created foreign key constraints for data integrity')
    console.log('  ‚úÖ Added performance indexes for faster queries')
    console.log('  ‚úÖ Implemented Row Level Security (RLS) policies')
    console.log('  ‚úÖ Created storage utility functions')
    console.log('  ‚úÖ Added database triggers for automatic timestamps')
    console.log('  ‚úÖ Updated TypeScript types to match schema')
    console.log('')
    console.log('üîß Next Steps:')
    console.log('  1. Configure storage bucket policies in Supabase dashboard')
    console.log('  2. Test admin functionality with new schema')
    console.log('  3. Run application tests to ensure compatibility')
    console.log('  4. Consider setting up automated backups')
  } else {
    console.log('‚ö†Ô∏è  Schema optimization completed with issues.')
    console.log('Please review the errors above and run manual fixes if needed.')
    process.exit(1)
  }
}

// Manual migration instructions
function printManualInstructions() {
  console.log('')
  console.log('üìã Manual Migration Instructions:')
  console.log('If the automatic migration fails, you can run the SQL manually:')
  console.log('')
  console.log('1. Go to your Supabase dashboard')
  console.log('2. Navigate to the SQL Editor')
  console.log('3. Copy and paste the contents of each migration file:')
  console.log('   - src/migrations/003_schema_optimization.sql')
  console.log('   - src/migrations/004_storage_optimization.sql')
  console.log('4. Execute each SQL file in order')
  console.log('5. Configure storage bucket policies manually')
  console.log('')
}

// Run the migration
if (require.main === module) {
  runSchemaOptimization().catch((error) => {
    console.error('‚ùå Schema optimization failed:', error)
    printManualInstructions()
    process.exit(1)
  })
}

export { runSchemaOptimization }
